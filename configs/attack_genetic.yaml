# Genetic Algorithm-based Adversarial Attack Configuration

# Attack parameters
attack:
  name: "genetic_algorithm"
  target_model: "zhihan1996/DNABERT-2-117M"  # Start from pretrained model
  dataset: "promoter"  # Dataset to attack
  test_samples: 10  # Number of test samples to attack (fast testing)
  max_perturbations: 8  # Allow more nucleotide changes for stronger attacks
  
# Genetic algorithm parameters
genetic_algorithm:
  population_size: 20  # Small population for speed
  max_generations: 10  # Very few generations for speed
  elite_ratio: 0.1  # Keep fewer elite, more exploration
  mutation_rate: 0.3  # Higher mutation rate for more aggressive search
  crossover_rate: 0.9  # Higher crossover rate
  convergence_threshold: 5  # Quick convergence for speed
  
# Fitness function weights
fitness:
  confidence_drop_weight: 2.0  # Much higher weight on confidence drop
  perturbation_penalty: 0.05  # Lower penalty for perturbations (allow more changes)
  biological_penalty: 0.1  # Lower biological penalty (more aggressive)
  
# Biological constraints
biological_constraints:
  max_gc_deviation: 0.05  # Maximum allowed deviation from original GC content (5%)
  preserve_motifs: true  # Whether to preserve known regulatory motifs
  prefer_transitions: true  # Prefer A↔G, C↔T mutations (more biologically likely)
  avoid_stop_codons: true  # Avoid creating stop codons in coding regions
  
# Attack success criteria
success_criteria:
  confidence_threshold: 0.4  # Attack successful if confidence drops below 40%
  min_confidence_drop: 0.15  # Minimum confidence drop to consider successful (15%)
  
# Output configuration
output:
  save_adversarial_sequences: true
  save_attack_statistics: true
  output_dir: "data/adversarial/genetic_attack"
  detailed_logging: true
